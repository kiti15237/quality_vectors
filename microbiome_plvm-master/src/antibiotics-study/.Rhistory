taxa <- as_data_frame(tax_table(abt)@.Data)
taxa$rsv <- rownames(tax_table(abt))
taxa$Taxon_5[which(taxa$Taxon_5 == "")] <- taxa$Taxon_4[which(taxa$Taxon_5 == "")]
beta_hat <- beta_hat %>%
left_join(taxa) %>%
mutate(
topic = paste("Topic", topic),
Taxon_5 = str_extract(Taxon_5, "[^_]+")
)
beta_hat
dim(beta_hat)
sorted_taxa <- names(sort(table(beta_hat$Taxon_5), decreasing = TRUE))
beta_hat$Taxon_5 <- factor(beta_hat$Taxon_5, levels = sorted_taxa)
beta_hat$rsv <- factor(beta_hat$rsv, levels = taxa$rsv)
## ---- extract_theta ----
theta_logit <- samples$theta
for (i in seq_len(nrow(theta_logit))) {
for (d in seq_len(stan_data$D)) {
theta_logit[i, d, ] <- log(theta_logit[i, d, ])
theta_logit[i, d, ] <- theta_logit[i, d, ] - mean(theta_logit[i, d, ])
}
}
theta_hat <- theta_logit %>%
melt(
varnames = c("iteration", "sample", "topic"),
value.name = "theta_logit"
)
theta_hat$sample <- sample_names(abt)[theta_hat$sample]
sample_info <- sample_data(abt)
sample_info$sample <- rownames(sample_info)
theta_hat$topic <- paste("Topic", theta_hat$topic)
theta_hat <- theta_hat %>%
left_join(sample_info, by = "sample")
## ---- extract_beta ----
# underlying RSV distributions
beta_logit <- samples$beta
for (i in seq_len(nrow(beta_logit))) {
for (k in seq_len(stan_data$K)) {
beta_logit[i, k, ] <- log(beta_logit[i, k, ])
beta_logit[i, k, ] <- beta_logit[i, k, ] - mean(beta_logit[i, k, ])
}
}
beta_hat <- beta_logit %>%
melt(
varnames = c("iterations", "topic", "rsv_ix"),
value.name = "beta_logit"
) %>%
as_data_frame()
beta_hat$rsv <- rownames(tax_table(abt))[beta_hat$rsv_ix]
taxa <- as_data_frame(tax_table(abt)@.Data)
taxa$rsv <- rownames(tax_table(abt))
taxa$Taxon_5[which(taxa$Taxon_5 == "")] <- taxa$Taxon_4[which(taxa$Taxon_5 == "")]
beta_hat <- beta_hat %>%
left_join(taxa) %>%
mutate(
topic = paste("Topic", topic),
Taxon_5 = str_extract(Taxon_5, "[^_]+")
)
sorted_taxa <- names(sort(table(beta_hat$Taxon_5), decreasing = TRUE))
beta_hat$Taxon_5 <- factor(beta_hat$Taxon_5, levels = sorted_taxa)
beta_hat$rsv <- factor(beta_hat$rsv, levels = taxa$rsv)
## ---- extract_theta ----
theta_logit <- samples$theta
for (i in seq_len(nrow(theta_logit))) {
for (d in seq_len(stan_data$D)) {
theta_logit[i, d, ] <- log(theta_logit[i, d, ])
theta_logit[i, d, ] <- theta_logit[i, d, ] - mean(theta_logit[i, d, ])
}
}
theta_hat <- theta_logit %>%
melt(
varnames = c("iteration", "sample", "topic"),
value.name = "theta_logit"
)
theta_hat$sample <- sample_names(abt)[theta_hat$sample]
sample_info <- sample_data(abt)
sample_info$sample <- rownames(sample_info)
theta_hat$topic <- paste("Topic", theta_hat$topic)
theta_hat <- theta_hat %>%
left_join(sample_info, by = "sample")
theta_logit <- samples$theta
for (i in seq_len(nrow(theta_logit))) {
for (d in seq_len(stan_data$D)) {
theta_logit[i, d, ] <- log(theta_logit[i, d, ])
theta_logit[i, d, ] <- theta_logit[i, d, ] - mean(theta_logit[i, d, ])
}
}
theta_hat <- theta_logit %>%
melt(
varnames = c("iteration", "sample", "topic"),
value.name = "theta_logit"
)
theta_hat$sample <- sample_names(abt)[theta_hat$sample]
sample_info <- sample_data(abt)
sample_info$sample <- rownames(sample_info)
theta_hat$topic <- paste("Topic", theta_hat$topic)
theta_hat <- theta_hat %>%
left_join(sample_info, by = "sample")
theta_hat
sample_info
?left_join
theta_hat
theta_hat %>%
left_join(sample_info, by = "sample")
data.frame(theta_hat)
data.frame(sample_info)
theta_hat <- as.data.frame(theta_hat) %>%
left_join(as.data.frame(sample_info), by = "sample")
as.data.frame(theta_hat) %>%
left_join(as.data.frame(sample_info), by = "sample")
tibble(theta_hat)
theta_hat
left_join(theta_hat, sample_info, by = "sample")
sample_info <- data.frame(sample_data(abt))
sample_info$sample <- rownames(sample_info)
theta_hat$topic <- paste("Topic", theta_hat$topic)
theta_hat <- as.data.frame(theta_hat) %>%
left_join(as.data.frame(sample_info), by = "sample")
theta_hat
plot_opts <- list(
"x" = "time",
"y" = "topic",
"fill" = "mean_theta",
"y_order" = paste("Topic", stan_data$K:1)
)
p <- ggheatmap(
theta_hat %>%
group_by(topic, time) %>%
summarise(mean_theta = mean(theta_logit, na.rm = TRUE)) %>%
as.data.frame(),
plot_opts
) +
labs(fill = "g(theta)")
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_heatmap-%s.png", argv$subject),
p, width = 7, height = 0.9
)
p
p <- ggplot(theta_hat) +
geom_boxplot(
aes(x = as.factor(time), y = theta_logit),
fill = "#C9C9C9",
outlier.size = 0.05,
size = 0.1,
notchwidth = 0.1,
position = position_dodge(width = 0)
) +
scale_y_continuous(breaks = scales::pretty_breaks(3)) +
min_theme(list(border_size = 0.7, text_size = 10, subtitle_size = 11)) +
facet_grid(topic ~ condition, scales = "free_x", space = "free_x") +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
labs(x = "Time", y = expression(paste("g(", theta[k], ")"))) +
theme(legend.position = "none") +
scale_x_discrete(breaks = seq(1, 60, by = 10) - 1)
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_boxplot-%s.png", argv$subject),
p, width = 6, height = 3.3
)
p
## ---- visualize_lda_theta_heatmap ----
plot_opts <- list(
"x" = "time",
"y" = "topic",
"fill" = "mean_theta",
"y_order" = paste("Topic", stan_data$K:1)
)
p <- ggheatmap(
theta_hat %>%
group_by(topic, time) %>%
summarise(mean_theta = mean(theta_logit, na.rm = TRUE)) %>%
as.data.frame(),
plot_opts
) +
labs(fill = "g(theta)")
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_heatmap-%s.png", argv$subject),
p, width = 7, height = 0.9
)
## ---- visualize_lda_theta_boxplot ----
p <- ggplot(theta_hat) +
geom_boxplot(
aes(x = as.factor(time), y = theta_logit),
fill = "#C9C9C9",
outlier.size = 0.05,
size = 0.1,
notchwidth = 0.1,
position = position_dodge(width = 0)
) +
scale_y_continuous(breaks = scales::pretty_breaks(3)) +
min_theme(list(border_size = 0.7, text_size = 10, subtitle_size = 11)) +
facet_grid(topic ~ condition, scales = "free_x", space = "free_x") +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
labs(x = "Time", y = expression(paste("g(", theta[k], ")"))) +
theme(legend.position = "none") +
scale_x_discrete(breaks = seq(1, 60, by = 10) - 1)
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_boxplot-%s.png", argv$subject),
p, width = 6, height = 3.3
)
p
theta_logit
theta_hat
dim(theta_logit)
?vb
## ---- lda ----
x <- t(get_taxa(abt))
dimnames(x) <- NULL
stan_data <- list(
K = 4,
V = ncol(x),
D = nrow(x),
n = x,
alpha = rep(1, 4),
gamma = rep(0.5, ncol(x))
)
start_fit <- Sys.time()
f <- stan_model(file = "../stan/lda_counts.stan")
stan_fit <- vb(
f,
data = stan_data,
output_samples = 700,
eta = 1,
adapt_engaged = FALSE
)
samples
dim(samples$theta)
start_fit <- Sys.time()
f <- stan_model(file = "../stan/lda_counts.stan")
stan_fit <- vb(
f,
data = stan_data,
output_samples = 150,
eta = 1,
adapt_engaged = FALSE
)
cat(sprintf(
"Finished in %f minutes\n",
Sys.time() - start_fit, 4)
)
#In this scenario, each time point gets its own topics - it's as if every time point is its own sample
save(
stan_fit,
file = sprintf("../../data/fits/lda-%s-%s.rda", argv$subject, gsub("[:|| ||-]", "", Sys.time()))
)
samples <- rstan::extract(stan_fit)
rm(stan_fit)
start_fit <- Sys.time()
f <- stan_model(file = "../stan/lda_counts.stan")
stan_fit <- vb(
f,
data = stan_data,
output_samples = 150,
eta = 1,
adapt_engaged = FALSE
)
stan_fit
save(
stan_fit,
file = sprintf("../../data/fits/lda-%s-%s.rda", argv$subject, gsub("[:|| ||-]", "", Sys.time()))
)
samples <- rstan::extract(stan_fit)
rm(stan_fit)
## ---- extract_beta ----
# underlying RSV distributions
beta_logit <- samples$beta
for (i in seq_len(nrow(beta_logit))) {
for (k in seq_len(stan_data$K)) {
beta_logit[i, k, ] <- log(beta_logit[i, k, ])
beta_logit[i, k, ] <- beta_logit[i, k, ] - mean(beta_logit[i, k, ])
}
}
beta_logit
dim(beta_logit)
beta_logit
beta_hat <- beta_logit %>%
melt(
varnames = c("iterations", "topic", "rsv_ix"),
value.name = "beta_logit"
) %>%
as_data_frame()
beta_hat
2582 * 4 * 148
beta_hat$iterations
beta_hat$rsv <- rownames(tax_table(abt))[beta_hat$rsv_ix]
taxa <- as_data_frame(tax_table(abt)@.Data)
taxa$rsv <- rownames(tax_table(abt))
taxa$Taxon_5[which(taxa$Taxon_5 == "")] <- taxa$Taxon_4[which(taxa$Taxon_5 == "")]
beta_hat
beta_hat <- beta_hat %>%
left_join(taxa) %>%
mutate(
topic = paste("Topic", topic),
Taxon_5 = str_extract(Taxon_5, "[^_]+")
)
beta_hat
sorted_taxa <- names(sort(table(beta_hat$Taxon_5), decreasing = TRUE))
beta_hat$Taxon_5 <- factor(beta_hat$Taxon_5, levels = sorted_taxa)
beta_hat$rsv <- factor(beta_hat$rsv, levels = taxa$rsv)
beta_hat
beta_hat[200:]
beta_hat[200:300,]
unique(beta_hat$topic)
## ---- extract_theta ----
theta_logit <- samples$theta
for (i in seq_len(nrow(theta_logit))) {
for (d in seq_len(stan_data$D)) {
theta_logit[i, d, ] <- log(theta_logit[i, d, ])
theta_logit[i, d, ] <- theta_logit[i, d, ] - mean(theta_logit[i, d, ])
}
}
dim(theta_logit)
theta_hat <- theta_logit %>%
melt(
varnames = c("iteration", "sample", "topic"),
value.name = "theta_logit"
)
theta_hat
theta_hat$sample <- sample_names(abt)[theta_hat$sample]
sample_info <- data.frame(sample_data(abt))
sample_info$sample <- rownames(sample_info)
theta_hat$topic <- paste("Topic", theta_hat$topic)
theta_hat <- as.data.frame(theta_hat) %>%
left_join(as.data.frame(sample_info), by = "sample")
theta_hat
plot_opts <- list(
"x" = "time",
"y" = "topic",
"fill" = "mean_theta",
"y_order" = paste("Topic", stan_data$K:1)
)
p <- ggheatmap(
theta_hat %>%
group_by(topic, time) %>%
summarise(mean_theta = mean(theta_logit, na.rm = TRUE)) %>%
as.data.frame(),
plot_opts
) +
labs(fill = "g(theta)")
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_heatmap-%s.png", argv$subject),
p, width = 7, height = 0.9
)
p
## ---- visualize_lda_theta_boxplot ----
p <- ggplot(theta_hat) +
geom_boxplot(
aes(x = as.factor(time), y = theta_logit),
fill = "#C9C9C9",
outlier.size = 0.05,
size = 0.1,
notchwidth = 0.1,
position = position_dodge(width = 0)
) +
scale_y_continuous(breaks = scales::pretty_breaks(3)) +
min_theme(list(border_size = 0.7, text_size = 10, subtitle_size = 11)) +
facet_grid(topic ~ condition, scales = "free_x", space = "free_x") +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
labs(x = "Time", y = expression(paste("g(", theta[k], ")"))) +
theme(legend.position = "none") +
scale_x_discrete(breaks = seq(1, 60, by = 10) - 1)
ggsave(
sprintf("../../doc/figure/visualize_lda_theta_boxplot-%s.png", argv$subject),
p, width = 6, height = 3.3
)
p
## ---- visualize_lda_beta ----
beta_summary <- beta_hat %>%
group_by(rsv_ix, topic) %>%
summarise(
rsv = rsv[1],
beta_median = median(beta_logit),
Taxon_5 = Taxon_5[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
levels(beta_summary$Taxon_5) <- append(levels(beta_summary$Taxon_5), "other")
beta_summary$Taxon_5[!(beta_summary$Taxon_5 %in% levels(beta_summary$Taxon_5)[1:7])] <- "other"
beta_subset <- beta_summary %>%
filter(rsv %in% rev(x_order)[1:750])
beta_subset$rsv_ix <- rep(seq_len(nrow(beta_subset) / 4), each = 4)
p <- ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = rsv_ix, y = beta_median, col = Taxon_5), size = 0.1) +
geom_errorbar(
aes(x = rsv_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = Taxon_5),
size = 0.4
) +
scale_color_brewer(palette = "Set2") +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(breaks = scales::pretty_breaks(3), limits = c(-5, 12)) +
facet_grid(topic ~ .) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "Species", y = expression(paste("g(", beta[k], ")")), col = "Family") +
theme(
panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom"
)
ggsave(
sprintf("../../doc/figure/visualize_lda_beta-%s.png", argv$subject),
p, width = 6, height = 3.5
)
p
setwd("C:/Users/ctata/Documents/Lab/quality_vectors/microbiome_plvm-master/src/antibiotics-study")
library("rstan")
library("reshape2")
library("tidyverse")
library("stringr")
library("phyloseq")
library("ggscaffold")
library("feather")
theme_set(min_theme(list(text_size = 7, subtitle_size = 9)))
source("./posterior_check_funs.R")
dir.create("../../data/fits/", recursive = TRUE)
dir.create("../../data/figure-input/", recursive = TRUE)
dir.create("../../doc/figure/", recursive = TRUE)
set.seed(11242016)
## ---- get-data ----
abt <- get(load("../../data/antibiotics-study/abt.rda"))
abt
AG_mapping <- read.delim("C:/Users/ctata/Documents/Lab/quality_vectors/data/AG_new/AG_mapping.txt")
View(AG_mapping)
otu_filtered_AG_07perc_feces <- read.delim("C:/Users/ctata/Documents/Lab/quality_vectors/data/AG_new/feces/otu_filtered_AG_07perc_feces.csv")
View(otu_filtered_AG_07perc_feces)
ps <- phyloseq(otu_table(otu_filtered_AG_07perc_feces), sample_data(AG_mapping))
otu <- otu_filtered_AG_07perc_feces
dim(otu)
rownames(otu)
colnames(otu)
rownames(AG_mapping)
AG_mapping[1:10,]
AG_mapping[1:10,]
AG_mapping[1:10, 1:10]
ps <- phyloseq(otu_table(otu_filtered_AG_07perc_feces, taxa_are_rows = T), sample_data(AG_mapping))
dim(AG_mapping)
dim(otu)
colnames(otu)
AG_mapping$X.SampleID
samples <- gsub("X", "", colnames(otu))
samples
samples[samples %in% AG_mapping$X.SampleID]
samples_include <- samples[samples %in% AG_mapping$X.SampleID]
len(samples_include)
length(samples_include)
length(samples)
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include]
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include, ]
otu <- otu[, colnames(otu) %in% samples_include]
dim(map)
dim(otu)
otu <- otu_filtered_AG_07perc_feces
#Read in AG data and make phyloseq object
colnames(otu) <- gsub("X", "", colnames(otu))
samples_include <- colnames(otu)[colnames(otu) %in% AG_mapping$X.SampleID]
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include, ]
otu <- otu[, colnames(otu) %in% samples_include]
dim(map)
dim(otu)
sample_data(map)
rownames(map) <- map$X.SampleID
dim(otu)
dim(map)
ps <- phyloseq(otu_table(otu, taxa_are_rows = T), sample_data(map))
map <- map[map$BODY_SITE == "UBERON:feces", ]
dim(map)
ps <- phyloseq(otu_table(otu, taxa_are_rows = T), sample_data(map))
otu <- otu[ , colnames(otu) %in% rownames(map)]
ps <- phyloseq(otu_table(otu, taxa_are_rows = T), sample_data(map))
map$BMI
map <- map[map$BMI != "Unspecificed" && map$BMI != "Unknown", ]
map$BMI
map$BMI != "Unspecified"
map <- map[map$BMI != "Unspecificed" & map$BMI != "Unknown", ]
map$BMI
map$BMI_CORRECTED
map$BMI
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include, ]
map <- map[map$BODY_SITE == "UBERON:feces", ]
map <- map[map$BMI != "Unspecificed", ]
map <- map[map$BMI != "Unknown", ]
map$BMI
map <- map[as.character(map$BMI) != "Unspecificed", ]
map$BMI
map$BMI[673]
map$BMI[674]
map$BMI[674] == "Unspecified"
map$BMI[674] != "Unspecified"
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include, ]
map <- map[map$BODY_SITE == "UBERON:feces", ]
map <- map[as.character(map$BMI) != "Unspecificed", ]
map <- map[map$BMI != "Unknown", ]
rownames(map) <- map$X.SampleID
map
map$BMI
as.numeric(map$BMI)
as.numeric(as.character(map$BMI))
!is.na(map$BMI)
map$BMI
map$BMI <- as.numeric(as.character(map$BMI))
map$BMI
!is.na(map$BMI)
map <- AG_mapping[AG_mapping$X.SampleID %in% samples_include, ]
map <- map[map$BODY_SITE == "UBERON:feces", ]
map$BMI <- as.numeric(as.character(map$BMI))
map <- map[!is.na(map$BMI), ]
rownames(map) <- map$X.SampleID
otu <- otu[ , colnames(otu) %in% rownames(map)]
dim(map)
dim(otu)
ps <- phyloseq(otu_table(otu, taxa_are_rows = T), sample_data(map))
